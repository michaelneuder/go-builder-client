// Code generated by fastssz. DO NOT EDIT.
// Hash: 36e3e8dd9d5d6e07166f777975c61a28b0f3a97bfeb5b51137d5591ae2a289a2
// Version: 0.1.3
package capella

import (
	v1 "github.com/attestantio/go-builder-client/api/v1"
	"github.com/attestantio/go-eth2-client/spec/capella"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the SubmitBlockRequest object
func (s *SubmitBlockRequest) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SubmitBlockRequest object to a target array
func (s *SubmitBlockRequest) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(336)

	// Field (0) 'Message'
	if s.Message == nil {
		s.Message = new(v1.BidTrace)
	}
	if dst, err = s.Message.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (1) 'ExecutionPayload'
	dst = ssz.WriteOffset(dst, offset)
	if s.ExecutionPayload == nil {
		s.ExecutionPayload = new(capella.ExecutionPayload)
	}
	offset += s.ExecutionPayload.SizeSSZ()

	// Field (2) 'Signature'
	dst = append(dst, s.Signature[:]...)

	// Field (1) 'ExecutionPayload'
	if dst, err = s.ExecutionPayload.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SubmitBlockRequest object
func (s *SubmitBlockRequest) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 336 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Message'
	if s.Message == nil {
		s.Message = new(v1.BidTrace)
	}
	if err = s.Message.UnmarshalSSZ(buf[0:236]); err != nil {
		return err
	}

	// Offset (1) 'ExecutionPayload'
	if o1 = ssz.ReadOffset(buf[236:240]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 336 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (2) 'Signature'
	copy(s.Signature[:], buf[240:336])

	// Field (1) 'ExecutionPayload'
	{
		buf = tail[o1:]
		if s.ExecutionPayload == nil {
			s.ExecutionPayload = new(capella.ExecutionPayload)
		}
		if err = s.ExecutionPayload.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SubmitBlockRequest object
func (s *SubmitBlockRequest) SizeSSZ() (size int) {
	size = 336

	// Field (1) 'ExecutionPayload'
	if s.ExecutionPayload == nil {
		s.ExecutionPayload = new(capella.ExecutionPayload)
	}
	size += s.ExecutionPayload.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the SubmitBlockRequest object
func (s *SubmitBlockRequest) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SubmitBlockRequest object with a hasher
func (s *SubmitBlockRequest) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Message'
	if s.Message == nil {
		s.Message = new(v1.BidTrace)
	}
	if err = s.Message.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'ExecutionPayload'
	if err = s.ExecutionPayload.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'Signature'
	hh.PutBytes(s.Signature[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SubmitBlockRequest object
func (s *SubmitBlockRequest) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
