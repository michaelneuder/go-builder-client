// Code generated by fastssz. DO NOT EDIT.
// Hash: 1eed35bb8d76ae3a78592df3216cb4344ddd9ebaeb8d0595dbfcbda96704360d
// Version: 0.1.3-dev
package v1

import (
	ssz "github.com/ferranbt/fastssz"
	"github.com/holiman/uint256"
)

// MarshalSSZ ssz marshals the BidTrace object
func (b *BidTrace) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BidTrace object to a target array
func (b *BidTrace) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Slot'
	dst = ssz.MarshalUint64(dst, b.Slot)

	// Field (1) 'ParentHash'
	dst = append(dst, b.ParentHash[:]...)

	// Field (2) 'BlockHash'
	dst = append(dst, b.BlockHash[:]...)

	// Field (3) 'BuilderPubkey'
	dst = append(dst, b.BuilderPubkey[:]...)

	// Field (4) 'ProposerPubkey'
	dst = append(dst, b.ProposerPubkey[:]...)

	// Field (5) 'ProposerFeeRecipient'
	dst = append(dst, b.ProposerFeeRecipient[:]...)

	// Field (6) 'GasLimit'
	dst = ssz.MarshalUint64(dst, b.GasLimit)

	// Field (7) 'GasUsed'
	dst = ssz.MarshalUint64(dst, b.GasUsed)

	// Field (8) 'Value'
	value := b.Value.Bytes32()
	for i := 0; i < 32; i++ {
		dst = append(dst, value[31-i])
	}

	return
}

// UnmarshalSSZ ssz unmarshals the BidTrace object
func (b *BidTrace) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 236 {
		return ssz.ErrSize
	}

	// Field (0) 'Slot'
	b.Slot = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'ParentHash'
	copy(b.ParentHash[:], buf[8:40])

	// Field (2) 'BlockHash'
	copy(b.BlockHash[:], buf[40:72])

	// Field (3) 'BuilderPubkey'
	copy(b.BuilderPubkey[:], buf[72:120])

	// Field (4) 'ProposerPubkey'
	copy(b.ProposerPubkey[:], buf[120:168])

	// Field (5) 'ProposerFeeRecipient'
	copy(b.ProposerFeeRecipient[:], buf[168:188])

	// Field (6) 'GasLimit'
	b.GasLimit = ssz.UnmarshallUint64(buf[188:196])

	// Field (7) 'GasUsed'
	b.GasUsed = ssz.UnmarshallUint64(buf[196:204])

	// Field (8) 'Value'
	value := make([]byte, 32)
	for i := 0; i < 32; i++ {
		value[i] = buf[235-i]
	}
	if b.Value == nil {
		b.Value = new(uint256.Int)
	}
	b.Value.SetBytes32(value)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BidTrace object
func (b *BidTrace) SizeSSZ() (size int) {
	size = 236
	return
}

// HashTreeRoot ssz hashes the BidTrace object
func (b *BidTrace) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BidTrace object with a hasher
func (b *BidTrace) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Slot'
	hh.PutUint64(b.Slot)

	// Field (1) 'ParentHash'
	hh.PutBytes(b.ParentHash[:])

	// Field (2) 'BlockHash'
	hh.PutBytes(b.BlockHash[:])

	// Field (3) 'BuilderPubkey'
	hh.PutBytes(b.BuilderPubkey[:])

	// Field (4) 'ProposerPubkey'
	hh.PutBytes(b.ProposerPubkey[:])

	// Field (5) 'ProposerFeeRecipient'
	hh.PutBytes(b.ProposerFeeRecipient[:])

	// Field (6) 'GasLimit'
	hh.PutUint64(b.GasLimit)

	// Field (7) 'GasUsed'
	hh.PutUint64(b.GasUsed)

	// Field (8) 'Value'
	value := b.Value.Bytes32()
	for i, j := 0, 31; i < j; i, j = i+1, j-1 {
		value[i], value[j] = value[j], value[i]
	}
	hh.PutBytes(value[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the BidTrace object
func (b *BidTrace) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}
